#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <signal.h>

#define PORT 8888

volatile sig_atomic_t stop_server = 0;

void handle_connection(int client_socket) {
    char buffer[1024];
    int bytes_received;

    bytes_received = recv(client_socket, buffer, sizeof(buffer), 0);
    if (bytes_received > 0) {
        buffer[bytes_received] = '\0'; // Завершаем строку
        printf("Received data from client: %s\n", buffer);
    } else if (bytes_received == 0) {
        printf("Client disconnected\n");
        close(client_socket); // Закрываем соединение
    } else {
        perror("recv failed");
        close(client_socket); // Закрываем соединение при ошибке
    }
}

void handle_signal(int signal) {
    printf("Received signal: %d\n", signal);
    stop_server = 1; // Установка флага завершения сервера
}

int main() {
    struct sockaddr_in server_addr, client_addr;
    int server_socket, client_socket, addr_len, maxfd, ret;
    fd_set readfds;
    struct sigaction sa;

    // Настройка обработчика сигнала
    sa.sa_handler = handle_signal;
    sa.sa_flags = SA_RESTART;
    sigfillset(&sa.sa_mask);
    sigaction(SIGHUP, &sa, NULL);

    // Создаем серверный сокет
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Failed to create server socket");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0) {
        perror("Failed to bind server socket");
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 5) < 0) {
        perror("Failed to listen on server socket");
        exit(EXIT_FAILURE);
    }

    FD_ZERO(&readfds);
    FD_SET(server_socket, &readfds);
    maxfd = server_socket;

    printf("Server listening on port %d\n", PORT);

    while (!stop_server) {
        fd_set tmpfds = readfds;

        ret = pselect(maxfd + 1, &tmpfds, NULL, NULL, NULL, NULL);
        if (ret < 0) {
            perror("pselect error");
            continue;
        }

        // Обработка новых подключений
        if (FD_ISSET(server_socket, &tmpfds)) {
            addr_len = sizeof(client_addr);
            client_socket = accept(server_socket, (struct sockaddr *) &client_addr, &addr_len);
            if (client_socket < 0) {
                perror("Failed to accept client connection");
                continue;
            }

            printf("New connection accepted\n");

            // Добавляем новый сокет к набору дескрипторов

            FD_SET(client_socket, &readfds);
            if (client_socket > maxfd) {
                maxfd = client_socket; // Увеличиваем maxfd, если нужно
            }
        }

        // Обработка входящих данных от клиентов
        for (int fd = 0; fd <= maxfd; fd++) {
            if (FD_ISSET(fd, &tmpfds) && fd != server_socket) {
                handle_connection(fd);
                // После обработки, если клиент отключен, сокет закрывается. 
                FD_CLR(fd, &readfds);
            }
        }
    }

    // Закрываем серверный сокет перед выходом
    close(server_socket);
    printf("Server shutting down...\n");
    return 0;
}
