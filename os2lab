#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <poll.h>

#define PORT 12345
#define BACKLOG 5
#define BUF_SIZE 1024

volatile sig_atomic_t stop_server = 0;

void handle_signal(int sig) {
    if (sig == SIGHUP) {
        stop_server = 1;
    }
}

void setup_signal_handler() {
    struct sigaction sa;
    memset(&sa, 0, sizeof(sa));
    sa.sa_handler = handle_signal;
    sigaction(SIGHUP, &sa, NULL);
}

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);
    char buffer[BUF_SIZE];

    // Установка обработчика сигналов
    setup_signal_handler();

    // Создаем TCP-серверный сокет
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Настраиваем адрес сокета
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Привязываем сокет к адресу
    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Прослушиваем входящие соединения
    if (listen(server_fd, BACKLOG) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Сервер запущен на порту %d\n", PORT);

    while (1) {
        // Ожидание клиента с использованием pselect
        fd_set read_fds;
        struct timeval timeout;
        timeout.tv_sec = 5; // Ожидание 5 секунд
        timeout.tv_usec = 0;

        // Формируем набор дескрипторов для pselect
        FD_ZERO(&read_fds);
        FD_SET(server_fd, &read_fds);

        int activity = pselect(server_fd + 1, &read_fds, NULL, NULL, &timeout, NULL);
        if (activity < 0) {
            perror("pselect");
            break;
        }

        // Проверяем наличие сигнала SIGHUP
        if (stop_server) {
            printf("Получен сигнал SIGHUP, завершение работы...\n");
            break;
        }

        // Проверяем, готов ли серверный сокет к чтению
        if (FD_ISSET(server_fd, &read_fds)) {
            // Принимаем новое соединение
            client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_addr_len);
            if (client_fd < 0) {
                perror("accept");
                continue;
            }

            printf("Новое соединение принято\n");

            // Обрабатываем соединение
            ssize_t bytes_received = recv(client_fd, buffer, sizeof(buffer) - 1, 0);
            if (bytes_received > 0) {
                buffer[bytes_received] = '\0'; // Завершаем строку
                printf("Получено %zd байт данных\n", bytes_received);
            } else if (bytes_received == 0) {
                printf("Соединение закрыто клиентом\n");
            } else {
                perror("recv");
            }

            // Закрываем клиентский сокет

            close(client_fd);
        }
    }

    // Закрываем серверный сокет перед выходом
    close(server_fd);
    return 0;
}
